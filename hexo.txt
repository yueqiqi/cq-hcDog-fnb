
http://jsrun.pro/square



//数组去重的方法
deWeight(arry){
  let newAry = [];//声明一个空数组用于保存最新数组
  for (let i = 0; i<arry.length; i++) {//array为需要被去重的函数
    if (newAry.indexOf(arry[i]) === -1) {//indexof如果返回-1 及表示不存在
      newAry.push(arry[i]);//最后更新数组
    }
  }
  return newAry;//最后再其他函数中调用即可
},
uniqs(array){
			    let temp = []; //一个新的临时数组
			    for(let i = 0; i < array.length; i++){
						if(temp.length==0){
							temp.push(array[i])
						}else{							
							let o = 0;
							for(let a = 0; a < temp.length;a ++){
								var obj = array[i];
								var obj1 = temp[a];
								if(JSON.stringify(obj1)===JSON.stringify(obj)){
									o = 1;
									break;
								}
							}
							if(o == 0){
								temp.push(array[i]);
							}		       
						}
			    }
			    return temp;
			},


vue去掉地址栏中的#:在router.js中Router中添加mode:'history'
vue保存页面:1.在APP.vue中的div(id='app')中改为
		<keep-alive >
			<router-view v-if="$route.meta.keepAlive"></router-view>
		</keep-alive>
			<router-view v-if="!$route.meta.keepAlive"/>
					2.在router.js中需要被缓存组件中添加meta:{keepAlive:true}
					
// 手机号中间四位加密
telHideCenter(val) {
    var reg = /^(\d{3})\d{4}(\d{4})$/;
    val = val.replace(reg, '$1****$2');
    return val;
},		
/**
 * 多个倒计时
 * @param {Object} idx:下标
 * @param {Object} sTime:开始时间
 * @param {Object} end:结束时间
 */
//1.引入moment日期处理类库 npm install moment --save//2.组件中引用:import moment from "moment";
countDown(idx, sTime, end) {
			let cur = JSON.parse(JSON.stringify(this.datalist[idx]));
			let endValue = moment(end).valueOf();
			let systemTime = moment(sTime).valueOf();
			let countValue = endValue - systemTime;
			if (countValue <= 0) {
				cur.showValue = '00天00小时00分00秒';
				return;
			}
			let totalSeconds = parseInt(countValue / 1000);
			let modulo = totalSeconds % (60 * 60 * 24);
			let d = Math.floor(totalSeconds / (60 * 60 * 24));
			let h = Math.floor(modulo / (60 * 60));
			modulo = modulo % (60 * 60);
			let m = Math.floor(modulo / 60);
			let s = modulo % 60;
			this.datalist[idx].showValue = d + '天 ' + h + '小时' + m + '分' + s + '';
		},
//调用		

setInterval(()=> {//设置倒计时
	this.datalist.map((res2, idx2) => {//idx2--数组的下标.startTime--开始时间.endTime--结束时间
		this.countDown(idx2, startTime,endTime);
	})
}, 1000)
			

//vue封装axios请求方法
import Vue from "vue"
import axios from 'axios' //全局安装axios: npm install axios --save
import qs from 'qs'  //全局安装qs: npm install qs

// //4:设置请求基础路径
axios.defaults.timeout = 5000 // 响应时间
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8' // 配置post请求头
axios.defaults.headers.get['Content-Type'] = 'application/json;charset=UTF-8' // 配置get请求头

axios.defaults.baseURL = 'http://XXX' // 配置请求后台接口地址

/**
 * get方法，对应get请求
 * @param {String} url [请求的url地址]
 * @param {Object} params [请求时携带的参数]
 */
export function get(url, params){
    return new Promise((resolve, reject) =>{
        axios.get(url, {
            params: params
        }).then(res => {
            resolve(res.data);
        }).catch(err =>{
            reject(err.data)
    })
});
}
/**
 * post方法，对应post请求
 * @param {String} url [请求的url地址]
 * @param {Object} params [请求时携带的参数]
 */
export function post(url, params) {
    return new Promise((resolve, reject) => {
         axios.post(url, QS.stringify(params)) //1.qs.parse()将URL解析成对象的形式2.qs.stringify()将对象 序列化成URL的形式，以&进行拼接(post请求就是用这个方法)
        .then(res => {
            resolve(res.data);
        })
        .catch(err =>{
            reject(err.data)
        })
    });
}

//封装完成在main.js中注册
import get from './http' //路径
Vue.prototype.$get = get; //全局使用
//在某某组件中使用
this.$get('/url',{
	params
}).then(res => {
	console.log('请求成功结果',res)
}).catch(err => {
	console.log('请求错误原因',err)
})
//post请求使用同上

//或者写成下面的方法
class HttpRequest {
	/**
	 * get方法，对应get请求
	 */
	static get(url, params, config) {
		return new Promise((resolve, reject) => {
			axios.get(url, {
					params: params
				}, config)
				.then(res => {
					resolve(res.data);
				})
				.catch(err => {
					reject(err.data)
				})
		});
	}
	/**
	 * post方法，对应post请求
	 */
	static post(url, params, config) {
		return new Promise((resolve, reject) => {
			axios.post(url, qs.stringify(params), config)
				.then(res => {
					resolve(res.data);
				})
				.catch(err => {
					reject(err.data)
				})
		});
	}
}
export default HttpRequest

//在main.js中全局注册
import http from './url' //文件路径
Vue.prototype.$http = http; //注册
this.$http.get('/url',{
	params
}).then(res => {
	console.log('请求成功',res)
}).catch(err => {
	console.log('请求失败原因',err)
})
//post请求把get改成post即可


/**
 * 根据一个数组 前端实现模糊搜索
 */
/**
 * 模糊搜索
 * @param {Object} list--搜索的数组
 * @param {Object} keyWord--搜索关键字
 */
fuzzySearch(list, keyWord) {
		var reg =  new RegExp(keyWord);
		var arr = [];
		console.log('关键字',reg,reg.test(list[0].name))
		for (var i = 0; i < list.length; i++) {
			if (reg.test(list[i].name)||reg.test(list[i].phone)||reg.test(list[i].carNUm)) {//根据name或者phone或者carNUm进行搜索
				arr.push(list[i]);
			}
		}
		return arr;
	},


/**
 * vue封装axios统一管理API接口(把请求后台的接口全部封装到一个js中)
 */
地址:(https://www.cnblogs.com/hs610/p/10842866.html)
//1.创建请求的axios.js
//2.创建api.js
/** 
 * api接口统一管理
 */
import Vue from 'vue'
import http from './http'; 

const api = {
	list : params =>http.get('/WorkOrder/list', params),
	....
}
export default api
//3.在main.js注入依赖
import api from '../src/global/api'
Vue.prototype.$api = api

//4.其他地方调用
this.$api.list({merchantCode:31000001,pageNo:1,pageSize:10,}).then(res=>{
				console.log('请求结果1111111',res)
})




/**
 * vue的keepAlive用法(跳转其他页面不刷新)
 */
地址:(https://www.jianshu.com/p/e713929341d5)
//1.在app.vue中改成
<keep-alive >
	  <router-view v-if="$route.meta.keepAlive"></router-view>
</keep-alive>
<router-view v-if="!$route.meta.keepAlive"/>
//2.再在router.js的需要缓存的组件加上meta:{keepAlive:true}